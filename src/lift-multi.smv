--=========================================================================
-- FIT3013 - Assignment 2
--=========================================================================
--=========================================================================
-- A Multi-Lift System
-- (courtesy of www.inf.ed.ac.uk/teaching/courses/ar/coursework/cw2.pdf)
--=========================================================================
---------------------------------------------------------------------------
-- <INSTRUCTIONS>
--   Single lift 
--    Make a copy of this file and name it lift-fixed.smv.
--    Edit lift-fixed.smv to fix the bug.
--    Do *not* make any alterations to the original specification in lift.smv.
--   Multi lift
--    Make a copy of this file and name it lift-multi.smv.
--    Edit lift-multi.smv to extend the specification.
--    Do *not* make any alterations to the original specification in lift.smv.
--   Bonus part
--    Make a copy of lift-multi.smv and name it lift-multi-fixed.smv.
--    Edit lift-multi-fixed.smv for the bonus bug fixes and additional LTL property specification.

--==========================================================================
-- Button model  
--==========================================================================
--  A button being active corresponds to a button in real life being lit-up.

--  An inactive button non-deterministically either stays inactive or
--  becomes active, The inactive-active transition models a button
--  press.

--  An active button is only made inactive on some reset signal input being
--  asserted.

--  A button starts off inactive.

MODULE button(reset)
  VAR
    active : boolean;
  ASSIGN
    init(active) := FALSE;
    next(active) := 
      case
        active = TRUE : reset ? FALSE : TRUE;
        active = FALSE : {FALSE, TRUE};
      esac;

--==========================================================================
--Model of Lift
--==========================================================================
-- When input go_up or go_dn is asserted, move lift in indicated direction,
-- if possible.

MODULE lift_model(go_up, go_dn)
  VAR
    position : 0 .. 3;  -- Floor lift is at
    moving : boolean;  

    floor_button0 : button(position = 0 & !moving);
    floor_button1 : button(position = 1 & !moving);
    floor_button2 : button(position = 2 & !moving);
    floor_button3 : button(position = 3 & !moving);

  ASSIGN
    init(position) := 0;
    next(position) := 
      case
        go_up & position != 3 : position + 1;
        go_dn & position != 0 : position - 1;
        TRUE                  : position;
      esac;

    init(moving) := FALSE;
    next(moving) := 
      case
        moving = FALSE & go_up & position != 3 : TRUE; 
        moving = FALSE & go_dn & position != 0 : TRUE; 
        moving = TRUE  & go_up & position = 3  : FALSE;
        moving = TRUE  & go_dn & position = 0  : FALSE;
        moving = TRUE  & !go_up & !go_dn       : FALSE;
        TRUE                                   : moving;
      esac;
    
--==========================================================================
-- Main: Controller + buttons + lift 
--==========================================================================

MODULE main
  VAR
    lift1 : lift_model(go_up1, go_dn1);
    lift2 : lift_model(go_up2, go_dn2);

    mode1 : {going_up, going_dn, idle};
    mode2 : {going_up, going_dn, idle};

    -- Call lift for going up
    up_button0 : button((stopped_at0_1 & mode1 = going_up));
    up_button1 : button((stopped_at1_1 & mode1 = going_up));
    up_button2 : button((stopped_at2_1 & mode1 = going_up));

     -- Call lift for going down
    dn_button1 : button((stopped_at1_1 & mode1 = going_dn));
    dn_button2 : button((stopped_at2_1 & mode1 = going_dn));
    dn_button3 : button((stopped_at3_1 & mode1 = going_dn));

  DEFINE
    -- Identifiers for resetting lift 1 buttons
    stopped_at0_1 := lift1.position = 0 & !lift1.moving;
    stopped_at1_1 := lift1.position = 1 & !lift1.moving;
    stopped_at2_1 := lift1.position = 2 & !lift1.moving;
    stopped_at3_1 := lift1.position = 3 & !lift1.moving;

    -- Identifiers for resetting lift 2 buttons
    stopped_at0_2 := lift2.position = 0 & !lift2.moving;
    stopped_at1_2 := lift2.position = 1 & !lift2.moving;
    stopped_at2_2 := lift2.position = 2 & !lift2.moving;
    stopped_at3_2 := lift2.position = 3 & !lift2.moving;

    -- Identifiers for resetting up/down buttons
    stopped_at0 := stopped_at0_1 | stopped_at0_2;
    stopped_at1 := stopped_at1_1 | stopped_at1_2;
    stopped_at2 := stopped_at2_1 | stopped_at2_2;
    stopped_at3 := stopped_at3_1 | stopped_at3_2;

    -- Control signals for lift 1
    go_up1 := mode1 = going_up & !(service_up_1 & lift1.moving) & req_above_posn1;
    go_dn1 := mode1 = going_dn & !(service_dn_1 & lift1.moving) & req_below_posn1;

    -- Control signals for lift 2
    go_up2 := mode2 = going_up & !(service_up_2 & lift2.moving) & req_above_posn2;
    go_dn2 := mode2 = going_dn & !(service_dn_2 & lift2.moving) & req_below_posn2;

    -- Condition for when request from button should be serviced while lift 1 is moving and going_up.
    service_up1_1 := 
      lift1.position = 1 & (lift1.floor_button1.active | up_button1.active);
    service_up2_1 := 
      lift1.position = 2 & (lift1.floor_button2.active | up_button2.active);
    service_up3_1 := 
      lift1.position = 3 & (lift1.floor_button3.active | dn_button3.active);
    
    service_up_1 := service_up1_1 | service_up2_1 | service_up3_1;

    -- Condition for when request from button should be serviced while lift 2 is moving and going_up.
    service_up1_2 := lift2.position = 1 & (lift2.floor_button1.active | up_button1.active);
    service_up2_2 := lift2.position = 2 & (lift2.floor_button2.active | up_button2.active);
    service_up3_2 := lift2.position = 3 & (lift2.floor_button3.active | dn_button3.active);
    service_up_2 := service_up1_2 | service_up2_2 | service_up3_2;

    -- Condition for when request from button should be serviced while lift 1 is moving and going_dn.
    service_dn2_1 := lift1.position = 2 & (lift1.floor_button2.active | dn_button2.active);
    service_dn1_1 := lift1.position = 1 & (lift1.floor_button1.active | dn_button1.active);
    service_dn0_1 := lift1.position = 0 & (lift1.floor_button0.active | up_button0.active);
    service_dn_1 := service_dn2_1 | service_dn1_1 | service_dn0_1;

    -- Condition for when request from button should be serviced while lift 2 is moving and going_dn.
    service_dn2_2 := lift2.position = 2 & (lift2.floor_button2.active | dn_button2.active);
    service_dn1_2 := lift2.position = 1 & (lift2.floor_button1.active | dn_button1.active);
    service_dn0_2 := lift2.position = 0 & (lift2.floor_button0.active | up_button0.active);
    service_dn_2 := service_dn2_2 | service_dn1_2 | service_dn0_2;
    -- Build-up various combinations of button requests for service
    -- Lift 1 has a person in it who wants to get to floor 1? If so then go to floor 1 eventually
    -- Lift 1 going up toward floor 1 & lift 2 isn't? Go floor 1 eventually
    -- Lift 1 going up toward floor 1 and lift 2 is as well, but lift 1 is closer? Go floor 1 eventually
    -- Lift 1 going dn toward floor 1 & lift 2 is going down but lift is closer? Go floor 1 eventually 
    -- Lift 1 is on the same floor and same direction as lift 2? Go to floor 

    req0_1 := up_button0.active | lift1.floor_button0.active ;
    req1_1 := up_button1.active | dn_button1.active | lift1.floor_button1.active;
    req2_1 := up_button2.active | dn_button2.active | lift1.floor_button2.active;
    req3_1 := dn_button3.active | lift1.floor_button3.active;

    req0_2 := lift2.floor_button0.active;
    req1_2 := lift2.floor_button1.active;
    req2_2 := lift2.floor_button2.active;
    req3_2 := lift2.floor_button3.active;

    req0 := req0_1 | req0_2;
    req1 := req1_1 | req1_2;
    req2 := req2_1 | req2_2;
    req3 := req3_1 | req3_2;

    req_above2_1 := req3_1;
    req_above1_1 := req2_1 | req_above2_1;
    req_above0_1 := req1_1 | req_above1_1;

    req_above2_2 := req3_2; 
    req_above1_2 := req2_2 | req_above2_2;
    req_above0_2 := req1_2 | req_above1_2;

    req_below1_1 := req0_1;
    req_below2_1 := req1_1 | req_below1_1;
    req_below3_1 := req2_1 | req_below2_1;

    req_below1_2 := req0_2;
    req_below2_2 := req1_2 | req_below1_2;
    req_below3_2 := req2_2 | req_below2_2;

    -- There a request from some floor above the current position
    req_above_posn1 := case
      lift1.position = 0 : req_above0_1;
      lift1.position = 1 : req_above1_1;
      lift1.position = 2 : req_above2_1;
      TRUE : FALSE; -- lift.position = 3
    esac;
    req_above_posn2 := case
      lift2.position = 0 : req_above0_2;
      lift2.position = 1 : req_above1_2;
      lift2.position = 2 : req_above2_2;
      TRUE : FALSE; -- lift.position = 3
    esac;

    -- There a request from some floor below the current position
    req_below_posn1 := case
      lift1.position = 1 : req_below1_1;
      lift1.position = 2 : req_below2_1;
      lift1.position = 3 : req_below3_1;
      TRUE : FALSE; -- lift.position = 0 
    esac;
    req_below_posn2 := case
      lift2.position = 1 : req_below1_2;
      lift2.position = 2 : req_below2_2;
      lift2.position = 3 : req_below3_2;
      TRUE : FALSE; -- lift.position = 0 
    esac;

  ASSIGN

    -- The transitions for the lift 1 controller state machine
    init(mode1) := idle;
    next(mode1) := case
      mode1 = idle & req_above_posn1
                   & req_below_posn1 : {going_up, going_dn};
      mode1 = idle & req_above_posn1 : going_up;
      mode1 = idle & req_below_posn1 : going_dn;
      mode1 = idle : idle;

      mode1 = going_up & req_above_posn1 : going_up;
      mode1 = going_up & !req_above_posn1 : idle;

      mode1 = going_dn & req_below_posn1 : going_dn;
      mode1 = going_dn & !req_below_posn1 : idle;
    esac;

    -- The transitions for the lift 2 controller state machine
    init(mode2) := idle;
    next(mode2) := case
      mode2 = idle & req_above_posn2 & req_below_posn2 : {going_up, going_dn};
      mode2 = idle & req_above_posn2 : going_up;
      mode2 = idle & req_below_posn2 : going_dn;
      mode2 = idle : idle;

      mode2 = going_up & req_above_posn2 : going_up;
      mode2 = going_up & !req_above_posn2 : idle;

      mode2 = going_dn & req_below_posn2 : going_dn;
      mode2 = going_dn & !req_below_posn2 : idle;
    esac;

  --JUSTICE lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & !lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active;
  --JUSTICE lift1.floor_button0.active & !lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE !lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE !lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active;
  --JUSTICE !lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active;
  --JUSTICE !lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active;



      
--==========================================================================
-- Specify your LTL properties here, see Section 2.5 of the 
-- assignment specification for the requirements.
--==========================================================================
  -- 0: Multiple requests can be made from within a single lift.
--LTLSPEC (
--  G (
--    F (lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & !lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active) &
--    F (lift1.floor_button0.active & !lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (!lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (!lift1.floor_button0.active & lift1.floor_button1.active & lift1.floor_button2.active & !lift1.floor_button3.active) &
--    F (!lift1.floor_button0.active & lift1.floor_button1.active & !lift1.floor_button2.active & lift1.floor_button3.active) &
--    F (!lift1.floor_button0.active & !lift1.floor_button1.active & lift1.floor_button2.active & lift1.floor_button3.active)
--  )
--)

   -- 1: A request made from inside a lift for any other floor will eventually take the lift to that floor
LTLSPEC (
  G ((lift1.floor_button0.active) -> F (stopped_at0_1)) &
  G ((lift1.floor_button1.active) -> F (stopped_at1_1)) &
  G ((lift1.floor_button2.active) -> F (stopped_at2_1)) &
  G ((lift1.floor_button3.active) -> F (stopped_at3_1)) 
) 
  -- 2: A request made from a floor will eventually take the lift to that floor
LTLSPEC (
  G ((up_button0.active) -> F (stopped_at0)) &
  G ((up_button1.active | dn_button1.active) -> F (stopped_at1)) &
  G ((up_button2.active | dn_button2.active) -> F (stopped_at2)) &
  G ((dn_button3.active) -> F (stopped_at3))
)
  -- 3: (When there are no other requests from inside the lifts), only one lift is used to service a given floor request, but not both.

  -- Only applicable to the multi-lift part

  -- 4: A lift will continue to travel in the same direction if it has requests in that direction.
LTLSPEC (
  G (((mode1 = going_up) & req_above_posn1) -> X (mode1 = going_up)) &
  G (((mode1 = going_dn) & req_below_posn1) -> X (mode1 = going_dn))
)
  -- 5: When there are no pending requests in the direction that it has been travelling, a lift can change direction to service another request in the opposite direction.
LTLSPEC (
  G (!req_above_posn1 & req_below_posn1 & mode1 = going_up -> F (mode1 = going_dn)) &
  G (!req_below_posn1 & req_above_posn1 & mode1 = going_dn -> F (mode1 = going_up))
)
  -- 6: The lift stops when there are no pending requests.
 LTLSPEC (
  G (!(req0_1 | req1_1 | req2_1 | req3_1) -> !lift1.moving)
)
  -- 7: The controller never commands the lift to go up and go down simultaneously.
LTLSPEC (
  G (mode1 = going_up -> !(mode1 = going_dn)) &
  G (mode1 = going_dn -> !(mode1 = going_up))
)
  -- 8: Whenever a lift is stopped at floor 0 and the floor buttons in the lift for floors 1 and 2 are active (pressed), the lift will stop at floor 1 before stooping at floor 2.
LTLSPEC (
G (
   (stopped_at0_1 & lift1.floor_button1.active & lift1.floor_button2.active) -> (
      (lift1.position = 0)  U (
          (lift1.position = 1 & lift1.moving)  U (
              (stopped_at1_1)  U (
                  (lift1.position = 1 & lift1.moving)  U (
                      (lift1.position = 2 & lift1.moving)  U (
                          stopped_at2_1
                        )
                    )
                )
            )
        )
      )
    )
)
  --9: Whenever the lift is stopped at floor 0 and the down buttons for floors 1 and 2 are active, the lift will stop first at floor 2 and second at floor 1.
LTLSPEC G (
  !lift1.moving & lift1.position = 0 & dn_button1.active & dn_button2.active -> (
    lift1.position = 1 -> lift1.moving U (
      lift1.position = 2 & !lift1.moving U lift1.moving U (
        lift1.position = 1 & !lift1.moving
      )
    )
  )
)
  -- 10: If none of the up, down or floor buttons for floor 2 is ever active, the lift never stops at floor 2.
LTLSPEC (
  G(!req2) -> G(!stopped_at2)
)
