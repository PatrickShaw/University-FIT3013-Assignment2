--=========================================================================
-- FIT3013 - Assignment 2
--=========================================================================
--=========================================================================
-- A Multi-Lift System
-- (courtesy of www.inf.ed.ac.uk/teaching/courses/ar/coursework/cw2.pdf)
--=========================================================================
---------------------------------------------------------------------------
-- <INSTRUCTIONS>
--   Single lift 
--    Make a copy of this file and name it lift-fixed.smv.
--    Edit lift-fixed.smv to fix the bug.
--    Do *not* make any alterations to the original specification in lift.smv.
--   Multi lift
--    Make a copy of this file and name it lift-multi.smv.
--    Edit lift-multi.smv to extend the specification.
--    Do *not* make any alterations to the original specification in lift.smv.
--   Bonus part
--    Make a copy of lift-multi.smv and name it lift-multi-fixed.smv.
--    Edit lift-multi-fixed.smv for the bonus bug fixes and additional LTL property specification.

--==========================================================================
-- Button model  
--==========================================================================
--  A button being active corresponds to a button in real life being lit-up.

--  An inactive button non-deterministically either stays inactive or
--  becomes active, The inactive-active transition models a button
--  press.

--  An active button is only made inactive on some reset signal input being
--  asserted.

--  A button starts off inactive.

MODULE button(reset)
  VAR
    active : boolean;
  ASSIGN
    init(active) := FALSE;
    next(active) := 
      case
        active = TRUE : reset ? FALSE : TRUE;
        active = FALSE : {TRUE, FALSE};
      esac;

--==========================================================================
--Model of Lift
--==========================================================================
-- When input go_up or go_dn is asserted, move lift in indicated direction,
-- if possible.

MODULE lift_model(go_up, go_dn)
  VAR
    position : 0 .. 3;  -- Floor lift is at
    moving : boolean;  
  ASSIGN

    init(position) := 0;
    next(position) := 
      case
        go_up & position != 3 : position + 1;
        go_dn & position != 0 : position - 1;
        TRUE                  :position;
      esac;

    init(moving) := FALSE;
    next(moving) := 
      case
        moving = FALSE & go_up & position != 3 : TRUE; 
        moving = FALSE & go_dn & position != 0 : TRUE; 
        moving = TRUE  & go_up & position = 3  : FALSE;
        moving = TRUE  & go_dn & position = 0  : FALSE;
        moving = TRUE  & !go_up & !go_dn       : FALSE;
        TRUE                                   : moving;
      esac;
    
--==========================================================================
-- Main: Controller + buttons + lift 
--==========================================================================

MODULE main
  VAR
    lift : lift_model(go_up, go_dn);

    mode : {going_up, going_dn, idle};

    -- Call lift for going up
    up_button0   : button(stopped_at0);
    up_button1   : button(stopped_at1);
    up_button2   : button(stopped_at2);

     -- Call lift for going down
    dn_button3   : button(stopped_at3);
    dn_button2   : button(stopped_at2);
    dn_button1   : button(stopped_at1);

    -- Request floor within lift
    floor_button0 : button(stopped_at0);
    floor_button1 : button(stopped_at1);
    floor_button2 : button(stopped_at2);
    floor_button3 : button(stopped_at3);

  DEFINE
    -- Identifiers for resetting buttons
    stopped_at0 := lift.position = 0 & !lift.moving;
    stopped_at1 := lift.position = 1 & !lift.moving;
    stopped_at2 := lift.position = 2 & !lift.moving;
    stopped_at3 := lift.position = 3 & !lift.moving;

    -- Control signals for lift
    go_up := mode = going_up & ! (service_up & lift.moving) & req_above_posn;
    go_dn := mode = going_dn & ! (service_dn & lift.moving) & req_below_posn;

    -- Condition for when request from button should be serviced while
    -- lift is moving and going_up.
    service_up1 := 
      lift.position = 1 & ( floor_button1.active | up_button1.active);
    service_up2 := 
      lift.position = 2 & ( floor_button2.active | up_button2.active);
    service_up3 := 
      lift.position = 3 & ( floor_button3.active | dn_button3.active);

    service_up := service_up1 | service_up2 | service_up3;

    -- Condition for when request from button should be serviced while
    -- lift is moving and going_dn.
    service_dn2 := 
      lift.position = 2 & ( floor_button2.active | dn_button2.active);
    service_dn1 := 
      lift.position = 1 & ( floor_button1.active | dn_button1.active);
    service_dn0 := 
      lift.position = 0 & ( floor_button0.active | up_button0.active);

    service_dn := service_dn2 | service_dn1 | service_dn0;


    -- Build-up various combinations of button requests for service

    req0 := up_button0.active | floor_button0.active ;
    req1 := up_button1.active | dn_button1.active | floor_button1.active;
    req2 := up_button2.active | dn_button2.active | floor_button2.active;
    req3 := dn_button3.active | floor_button3.active;

    req_above2 := req3;
    req_above1 := req2 | req_above2;
    req_above0 := req1 | req_above1;

    req_below1 := req0;
    req_below2 := req1 | req_below1;
    req_below3 := req2 | req_below2;

    -- There a request from some floor above the current position
    req_above_posn := 
        case
           lift.position = 0 : req_above0;
           lift.position = 1 : req_above1;
           lift.position = 2 : req_above2;
           TRUE           : FALSE;      -- lift.position = 3
        esac;

    -- There a request from some floor below the current position
    req_below_posn := 
        case
           lift.position = 1 : req_below1;
           lift.position = 2 : req_below2;
           lift.position = 3 : req_below3;
           TRUE           : FALSE;       -- lift.position = 0 
        esac;

  ASSIGN

    -- The transitions for the lift controller state machine
    init(mode) := idle;
    next(mode) := 
      case
        mode = idle & req_above_posn 
                    & req_below_posn  : {going_up, going_dn};
        mode = idle & req_above_posn  : going_up;
        mode = idle & req_below_posn  : going_dn;
        mode = idle : idle;

        mode = going_up & req_above_posn : going_up;
        mode = going_up & !req_above_posn : idle;

        mode = going_dn & req_below_posn : going_dn;
        mode = going_dn & !req_below_posn : idle;
      esac;



      
--==========================================================================
-- Specify your LTL properties here, see Section 2.5 of the 
-- assignment specification for the requirements.
--==========================================================================
  -- 0: Multiple requests can be made from within a single lift.
LTLSPEC (
  G (
    F (floor_button0.active & floor_button1.active & floor_button2.active & floor_button3.active) &       -- 0000
    F (floor_button0.active & floor_button1.active & floor_button2.active & !floor_button3.active) &      -- 000!
    F (floor_button0.active & floor_button1.active & !floor_button2.active & floor_button3.active) &      -- 00!0
    F (floor_button0.active & floor_button1.active & !floor_button2.active & !floor_button3.active) &     -- 00!!
    F (floor_button0.active & !floor_button1.active & floor_button2.active & floor_button3.active) &      -- 0!00
    F (floor_button0.active & !floor_button1.active & floor_button2.active & !floor_button3.active) &     -- 0!0!
    F (floor_button0.active & !floor_button1.active & !floor_button2.active & floor_button3.active) &     -- 0!!0
    -- F (floor_button0.active & !floor_button1.active & !floor_button2.active & !floor_button3.active) & -- 0!!!
    F (!floor_button0.active & floor_button1.active & floor_button2.active & floor_button3.active) &      -- !000
    F (!floor_button0.active & floor_button1.active & floor_button2.active & !floor_button3.active) &     -- !00!
    F (!floor_button0.active & floor_button1.active & !floor_button2.active & floor_button3.active) &     -- !0!0
    -- F (!floor_button0.active & floor_button1.active & !floor_button2.active & !floor_button3.active)   -- !0!!
    F (!floor_button0.active & !floor_button1.active & floor_button2.active & floor_button3.active) &     -- !!00
    -- F (!floor_button0.active & !floor_button1.active & floor_button2.active & !floor_button3.active) & -- !!0!
    -- F (!floor_button0.active & !floor_button2.active & !floor_button2.active & floor_button3.aactive)  -- !!!0
    -- F (!floor_button0.active & !floor_button1.active & !floor_button2.active & !floor_button3.active)  -- !!!!
  )
)
  -- 1: A request made from inside a lift for any other floor will eventually take the lift to that floor
LTLSPEC (
  G ((req0) -> F (stopped_at0)) &
  G ((req1) -> F (stopped_at1)) &
  G ((req2) -> F (stopped_at2)) &
  G ((req3) -> F (stopped_at3)) 
)

  -- 2: A request made from a floor will eventually take the lift to that floor
LTLSPEC (
  G ((up_button0.active) -> F (stopped_at0)) &
  G ((up_button1.active | dn_button1.active) -> F (stopped_at1)) &
  G ((up_button2.active | dn_button2.active) -> F (stopped_at2)) &
  G ((dn_button3.active) -> F (stopped_at3)) 
)
  -- 3: (When there are no other requests from inside the lifts), only one lift is used to service a given floor request, but not both.


  -- Only applicable to the multi-lift part


  -- 4: A lift will continue to travel in the same direction if it has requests in that direction.
LTLSPEC (
  G (((mode = going_up) & req_above_posn) -> X (mode = going_up)) &
  G (((mode = going_dn) & req_below_posn) -> X (mode = going_dn)) 
)
  -- 5: When there are no pending requests in the direction that it has been travelling, a lift can change direction to service another request in the opposite direction.
LTLSPEC (
  G (!req_above_posn & req_below_posn & mode = going_up -> F (mode = going_dn)) & 
  G (!req_below_posn & req_above_posn & mode = going_dn -> F (mode = going_up))
)
  -- 6: The lift stops when there are no pending requests.
 LTLSPEC (
  G (!(req0 | req1 | req2 | req3) -> !lift.moving) 
)
  -- 7: The controller never commands the lift to go up and go down simultaneously.
LTLSPEC (
  G (mode = going_up -> !(mode = going_dn)) &
  G (mode = going_dn -> !(mode = going_up)) 
)
  -- 8: Whenever a lift is stopped at floor 0 and the floor buttons in the lift for floors 1 and 2 are active (pressed), the lift will stop at floor 1 before stooping at floor 2.
LTLSPEC (
G ( 
   (stopped_at0 & floor_button1.active & floor_button2.active) -> (
      (lift.position = 0)  U (
          (lift.position = 1 & lift.moving)  U (
              (stopped_at1)  U (
                  (lift.position = 1 & lift.moving)  U (
                      (lift.position = 2 & lift.moving)  U ( 
                          stopped_at2
                        )
                    )
                )
            ) 
        )
      )
    )
)  
  --9: Whenever the lift is stopped at floor 0 and the down buttons for floors 1 and 2 are active, the lift will stop first at floor 2 and second at floor 1.
LTLSPEC G (
  !lift.moving & lift.position = 0 & dn_button1.active & dn_button2.active -> (
    lift.position = 1 -> lift.moving U (
      lift.position = 2 & !lift.moving U lift.moving U (
        lift.position = 1 & !lift.moving
      )
    )
  )
)
  -- 10: If none of the up, down or floor buttons for floor 2 is ever active, the lift never stops at floor 2.
LTLSPEC (
  G(!req2) -> G(!stopped_at2)
)
